library(ggmap)
library(dplyr)
library(lubridate)
library(ggplot2)
MyData <- read.csv(file="Traffic_Crash_Reports__CPD_.csv", header=TRUE, sep=",")
ggmap::register_google(key = "AIzaSyC1TTjTrS_n35G4dqROiHpSvQ5J3P1DqV8")
##Clean data function****************************************
function_add_new_variables<- function(MyDATA)
{
MyData<-subset(MyData,       select=-c(ADDRESS_X,COMMUNITY_COUNCIL_NEIGHBORHOOD,CPD_NEIGHBORHOOD,INSTANCEID,LOCALREPORTNO,SNA_NEIGHBORHOOD))
MyData$AGE<-replace(MyData$AGE,MyData$AGE == "UNKNOWN",NA)
MyData$GENDER<-replace(MyData$GENDER,MyData$GENDER == "UNKNOWN",NA)
MyData_filter <- MyData %>%
mutate(
crash_severity_id = as.integer(
ifelse (MyData$CRASHSEVERITY == "2 - SERIOUS INJURY SUSPECTED", 22,
ifelse (MyData$CRASHSEVERITY == "5 - PROPERTY DAMAGE ONLY", 3,
ifelse (MyData$CRASHSEVERITY == "4 - INJURY POSSIBLE", 4,
ifelse (MyData$CRASHSEVERITY == "3 - MINOR INJURY SUSPECTED",                            33,MyData$CRASHSEVERITYID)))))
)
MyData_filter <- MyData_filter %>%         mutate(  crash_age_group_id = as.integer(
ifelse (MyData_filter$AGE == "UNDER 18", 1,                                                    ifelse (MyData_filter$AGE == "18-25",2,
ifelse (MyData_filter$AGE == "26-30",3,
ifelse (MyData_filter$AGE == "31-40", 4,                                                       ifelse (MyData_filter$AGE == "41-50",5,
ifelse (MyData_filter$AGE == "51-60",6 ,                                                       ifelse (MyData_filter$AGE == "61-70",7,
ifelse (MyData_filter$AGE == "OVER 70",8 ,                                                                      0))) ))) )))
)
MyData_filter <- MyData_filter %>%         mutate(  crash_male_female_id = as.integer(
ifelse (MyData_filter$GENDER == "M - MALE", 0,1 )
))
MyData_filter <- MyData_filter %>%         mutate(  GENDER = as.character(
ifelse (MyData_filter$GENDER == "F - FEMALE", "FEMALE"  ,
ifelse (MyData_filter$GENDER == "FEMALE", "FEMALE"  ,
ifelse (MyData_filter$GENDER == "M - MALE", "MALE",
ifelse (MyData_filter$GENDER == "MALE", "MALE",""
))))
)
)
MyData_filter <- MyData_filter %>%         mutate(  GENDER_COLOR = as.character(
ifelse (MyData_filter$GENDER == "FEMALE", "red" , "blue")
)
)
MyData_filter <- MyData_filter %>%filter (LATITUDE_X != "")%>%filter(LONGITUDE_X != "")%>% filter(AGE != "")
MyData_filter<-na.omit(MyData_filter)
MyData_filter$Year <- as.Date(MyData_filter$CRASHDATE,"%d/%m/%Y")
MyData_filter<-MyData_filter %>%
filter( between(Year, as.Date("2013-01-01"), as.Date("2019-01-10")))%>% filter(AGE != "UNKNOWN" )
return( MyData_filter)
}
## look at clean dataset*************************
MyData_filter<- function_add_new_variables(MyData)
#head(MyData_filter,100)
class(MyData_filter$Year)
#summary(MyData_filter)
#glimpse(MyData_filter)
## create function to create google maps
google_maps<-function ()
{
map <- get_map("Cincinnati, Ohio", zoom = 11)
return(map)
}
## Query data for  plots*********************************
summary_function<-function()
{
summary_day_of_week_injures_name<-MyData_filter%>% filter(GENDER !="")%>%group_by(DAYOFWEEK,AGE,GENDER,INJURIES)%>% summarise(summary_count = n())
summary_gender_injures_percentage<-MyData_filter%>% filter(GENDER !="")%>%group_by(AGE,GENDER,INJURIES)%>% summarise(summary_count = n())
summary_gender_age<-MyData_filter%>% filter(GENDER !="")%>%group_by(AGE,GENDER)%>% summarise(summary_count = n())%>%mutate(percent = (summary_count/sum(summary_count))*100)
summary_crashlocation<-MyData_filter%>%filter(CRASHLOCATION !="")%>%group_by(CRASHLOCATION)%>%summarise(count_of_crashes = n())
return(list(summary_day_of_week_injures_name=summary_day_of_week_injures_name,summary_gender_injures_percentage=summary_gender_injures_percentage,summary_gender_age=summary_gender_age,summary_crashlocation = summary_crashlocation))
}
### creat plots
map<-google_maps()
attach(summary_function())
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(AGE =="18-25"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color= "red" , size=5, alpha=0.5)+ggtitle('Crashes By 18-25 Age Group')
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(AGE =="OVER 70"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color="red", size=3, alpha=0.5)+ggtitle('Crashes By Over 70 Age Group')
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(AGE =="UNDER 18"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color="red", size=3, alpha=0.5)+ggtitle('Crashes By Under 18 Age Group')
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(AGE =="31-40"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color="red", size=3, alpha=0.5)+ggtitle('Crashes By 31-40 Group')
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(WEATHER =="6 - SNOW"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color="green", size=3, alpha=0.5)+ggtitle('Weather Condition Snow')
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(WEATHER =="4 - RAIN"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color="green", size=3, alpha=0.5)+ggtitle('Weather Condition Rain')
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(WEATHER =="2 - CLOUDY"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color="green", size=3, alpha=0.5)+ggtitle('Weather Condition Cloudy')
map%>% ggmap() + geom_point(data = MyData_filter%>%filter(WEATHER =="1 - CLEAR"), aes(x = as.numeric(LONGITUDE_X) , y =as.numeric(LATITUDE_X) ), color="green", size=3, alpha=0.5)+ggtitle('Weather Condition Clear')
ggplot(data = MyData_filter) +
geom_bar(mapping = aes(x = MyData_filter$AGE))
ggplot(summary_day_of_week_injures_name, aes(x= DAYOFWEEK, y= summary_count, fill = AGE, color=GENDER, shape=INJURIES)) + geom_point() + scale_shape_manual(values=seq(0,15))
ggplot(summary_gender_injures_percentage, aes(x= AGE, y= summary_count,  color=GENDER, shape=INJURIES)) + geom_point() + scale_shape_manual(values=seq(0,15))
pie = ggplot(summary_gender_age%>%filter(GENDER=="FEMALE"), aes(x="FEMALE", y=percent, fill=AGE)) + geom_bar(stat="identity", width=1) +coord_polar("y", start=0) + geom_text(aes(label =round(percent,2) ), position = position_stack(vjust = 0.9))
pie
pie = ggplot(summary_gender_age%>%filter(GENDER=="MALE"), aes(x="MALE", y=percent, fill=AGE)) + geom_bar(stat="identity", width=1) +coord_polar("y", start=0) + geom_text(aes(label =round(percent,2) ), position = position_stack(vjust = 0.9))
pie
summary_gender_age
ggplot( data = summary_gender_age, aes((summary_count)))+ geom_density(aes(fill =factor(AGE), alpha=.095))
ggplot(aes(reorder(summary_crashlocation$CRASHLOCATION,summary_crashlocation$count_of_crashes), y =summary_crashlocation$count_of_crashes), data = summary_crashlocation , colors=factor(summary_crashlocation$CRASHLOCATION)) +geom_bar(stat = "identity")+coord_flip() +
geom_text(aes(label = summary_crashlocation$count_of_crashes),  data = summary_crashlocation, hjust = -.1, size = 1.5)+
xlab('Crash Locations') +  ylab('Number of Occurrences') +  ggtitle('Location of Crashes')
### lINEAR ***********************************
fit1 <- lm(MyData_filter$crash_severity_id ~ MyData_filter$crash_age_group_id + MyData_filter$crash_male_female_id + MyData_filter$WEATHER + MyData_filter$INJURIES, MyData_filter)
fit2 <- lm(MyData_filter$crash_severity_id ~  MyData_filter$crash_age_group_id +MyData_filter$crash_male_female_id + MyData_filter$INJURIES  )
coef(fit2)
summary(fit1)
summary(fit2)
fit2_resid<-resid(fit2)
fit2_fitted<-fitted(fit2)
layout(matrix(1:4,2,2))
plot(fit2)
anova(fit1, fit2)
str(MyData)
summary(MyData)
summary(MyData)
str(MyData)
summary(MyData)
summary(MyData)
### cross table
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
report = crosstab(df_new,row.vars ="MyData.Year", type = "f")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(plotly)
library(ggplot2)
MyData <- read.csv(file="data/bls-jobs-by-industry-category-1.csv", header=TRUE, sep=",")
head(MyData,3)
df_new <- data.frame(MyData$Total.Jobs..private.and.government. , MyData$Private.Sector..total., MyData$Mining..Logging.and.Construction, MyData$Year)
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(df_new,type="full")
h<-hist(df_new$MyData.Total.Jobs..private.and.government., breaks=10, col="red", xlab="Total Jobs Private and Government",
main="Total private and government jobs")
barplot(df_new$MyData.Private.Sector..total.,
main = "Private Sector",
ylab = "Cost",
xlab = "Year",
names.arg = MyData$Year,
col = "darkred",
horiz = FALSE)
### cross table
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
report = crosstab(df_new,row.vars ="MyData.Year", type = "f")
print(report)
plot(MyData$Total.Jobs..private.and.government,MyData$Month)
str(MyData)
summary(MyData)
head(MyData,3)
head(MyData,3)
barplot(df_new$MyData.Private.Sector..total.,
main = "Private Sector",
ylab = "Cost",
xlab = "Year",
names.arg = MyData$Year,
col = "darkred",
horiz = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=4)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=4)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=4)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=4)
install.packages("corrplot")
install.packages("ellipse")
library(recommenderlab)
library(reshape2)
library(ggplot2)
library(DBI)
library(RSQLite)
library(dplyr)
library(varhandle)
library(ggplot2)
library(caret)
library(skimr)
MyData_store_nbr_weather <- read.csv("key.csv", header=TRUE, sep=",")
MyData_store_nbr_weather <- read.csv("data/key.csv", header=TRUE, sep=",")
MyData_weather <- read.csv("weather.csv", header=TRUE, sep=",")
MyData_store_nbr_weather <- read.csv("data/key.csv", header=TRUE, sep=",")
MyData_weather <- read.csv("data/weather.csv", header=TRUE, sep=",")
MyData_feature_features <- read.csv("data/features.csv", header=TRUE, sep=",")
MyData_feature_train <- read.csv("data/train.csv", header=TRUE, sep=",")
MyData_store_size <- read.csv("data/stores.csv", header=TRUE, sep=",")
str(MyData_weather)
View(MyData_weather)
str(MyData_weather)
View(MyData_weather)
str(MyData_store_nbr_weather)
View(MyData_store_nbr_weather)
MyData_weather<-MyData_weather %>% mutate(snowfall_new = ifelse(snowfall == "M" , 0,  ifelse(trimws(snowfall) == "T" , 0, unfactor(snowfall))))
MyData_weather<-MyData_weather %>% mutate(preciptotal_new= ifelse(preciptotal == "M" , 0,  ifelse(trimws(preciptotal) == "T" , 0, unfactor(preciptotal))))
MyData_weather$station_nbr =as.numeric(MyData_weather$station_nbr  )
MyData_weather$tmax =as.numeric(MyData_weather$tmax  )
MyData_weather$tmin =as.numeric(MyData_weather$tmin  )
MyData_weather$snowfall_new =as.numeric(MyData_weather$snowfall_new  )
MyData_weather$preciptotal_new =as.numeric(MyData_weather$preciptotal_new )
MyData_weather$month =" "
#MyData_weather <-   filter(MyData_weather, station_nbr <= 9  )
MyData_weather$year <-   substr(MyData_weather$date, 1, 4)
MyData_weather$month <- substr(MyData_weather$date, 6, 7)
MyData_weather<-MyData_weather %>% mutate(month= ifelse(month == "01" ,"Jan",  ifelse(trimws(month) == "02" , "Feb",
ifelse(trimws(month) == "03" , "Mar",
ifelse(trimws(month) == "04" , "Apr",
ifelse(trimws(month) == "05" , "May",
ifelse(trimws(month) == "06" , "Jun",
ifelse(trimws(month) == "07" , "Jul",
ifelse(trimws(month) == "08" , "Aug",
ifelse(trimws(month) == "09" , "Sep",
ifelse(trimws(month) == "10" , "Oct",
ifelse(trimws(month) == "11" , "Nov",
ifelse(trimws(month) == "12" , "Dec",
" ??")))))))))))))
keeps <- c("station_nbr", "date","tmax","tmin","sunrise","sunset","codesum","month","year","preciptotal_new","snowfall_new")
MyData_weather <-  MyData_weather[keeps]
View (MyData_weather)
MyData_weather[is.na(MyData_weather)] <- 0
MyData_feature_train$day_of_week =""
MyData_feature_train$day_of_week = weekdays( as.Date(MyData_feature_train$date))
MyData_weather<-MyData_weather %>% mutate(snowfall_new = ifelse(snowfall == "M" , 0,  ifelse(trimws(snowfall) == "T" , 0, unfactor(snowfall))))
MyData_store_nbr_weather <- read.csv("data/key.csv", header=TRUE, sep=",")
MyData_weather <- read.csv("data/weather.csv", header=TRUE, sep=",")
MyData_feature_features <- read.csv("data/features.csv", header=TRUE, sep=",")
MyData_feature_train <- read.csv("data/train.csv", header=TRUE, sep=",")
MyData_store_size <- read.csv("data/stores.csv", header=TRUE, sep=",")
str(MyData_feature_train)
View(MyData_feature_train)
MyData_weather<-MyData_weather %>% mutate(snowfall_new = ifelse(snowfall == "M" , 0,  ifelse(trimws(snowfall) == "T" , 0, unfactor(snowfall))))
MyData_weather<-MyData_weather %>% mutate(preciptotal_new= ifelse(preciptotal == "M" , 0,  ifelse(trimws(preciptotal) == "T" , 0, unfactor(preciptotal))))
MyData_weather$station_nbr =as.numeric(MyData_weather$station_nbr  )
MyData_weather$tmax =as.numeric(MyData_weather$tmax  )
MyData_weather$tmin =as.numeric(MyData_weather$tmin  )
MyData_weather$snowfall_new =as.numeric(MyData_weather$snowfall_new  )
MyData_weather$preciptotal_new =as.numeric(MyData_weather$preciptotal_new )
MyData_weather$month =" "
#MyData_weather <-   filter(MyData_weather, station_nbr <= 9  )
MyData_weather$year <-   substr(MyData_weather$date, 1, 4)
MyData_weather$month <- substr(MyData_weather$date, 6, 7)
MyData_weather<-MyData_weather %>% mutate(month= ifelse(month == "01" ,"Jan",  ifelse(trimws(month) == "02" , "Feb",
ifelse(trimws(month) == "03" , "Mar",
ifelse(trimws(month) == "04" , "Apr",
ifelse(trimws(month) == "05" , "May",
ifelse(trimws(month) == "06" , "Jun",
ifelse(trimws(month) == "07" , "Jul",
ifelse(trimws(month) == "08" , "Aug",
ifelse(trimws(month) == "09" , "Sep",
ifelse(trimws(month) == "10" , "Oct",
ifelse(trimws(month) == "11" , "Nov",
ifelse(trimws(month) == "12" , "Dec",
" ??")))))))))))))
keeps <- c("station_nbr", "date","tmax","tmin","sunrise","sunset","codesum","month","year","preciptotal_new","snowfall_new")
MyData_weather <-  MyData_weather[keeps]
View (MyData_weather)
MyData_weather[is.na(MyData_weather)] <- 0
MyData_feature_train$day_of_week =""
MyData_feature_train$day_of_week = weekdays( as.Date(MyData_feature_train$date))
MyData_weather_combine <- merge(MyData_store_nbr_weather,MyData_weather, by =c("station_nbr"))
MyData_weather_combine <- merge(MyData_weather_combine,MyData_store_size, by.x =c("store_nbr"),by.y =c("Store"))
MyData_train_combine <- merge(MyData_feature_train,MyData_store_size, by.x =c("store_nbr"),by.y =c("Store"))
MyData_feature_train$day_of_week =""
MyData_feature_train$day_of_week = weekdays( as.Date(MyData_feature_train$date))
MyData_feature_train$day_of_week =""
MyData_feature_train$day_of_week = weekdays( as.Date(MyData_feature_train$date))
MyData_train_combine<-  MyData_train_combine%>% mutate(search_condition = ifelse((preciptotal_new >= 1.0) & (units>=10),1,0))
head(MyData_train_combine)
cor_keeps <- c("station_nbr","store_nbr" ,"tmax","tmin","preciptotal_new","snowfall_new","item_nbr","units","Size.x","search_condition")
MyData_weather_combine_corr<-  MyData_train_combine[cor_keeps]
MyData_feature_train$day_of_week =""
MyData_feature_train$day_of_week = weekdays( as.Date(MyData_feature_train$date))
str(MyData_feature_train)
View(MyData_feature_train)
library(recommenderlab)
library(reshape2)
library(ggplot2)
library(DBI)
library(RSQLite)
library(dplyr)
library(varhandle)
library(ggplot2)
library(caret)
library(skimr)
MyData_store_nbr_weather <- read.csv("data/key.csv", header=TRUE, sep=",")
MyData_weather <- read.csv("data/weather.csv", header=TRUE, sep=",")
MyData_feature_features <- read.csv("data/features.csv", header=TRUE, sep=",")
MyData_feature_train <- read.csv("data/train.csv", header=TRUE, sep=",")
MyData_store_size <- read.csv("data/stores.csv", header=TRUE, sep=",")
str(MyData_weather)
View(MyData_weather)
str(MyData_feature_train)
View(MyData_feature_train)
MyData_weather<-MyData_weather %>% mutate(snowfall_new = ifelse(snowfall == "M" , 0,  ifelse(trimws(snowfall) == "T" , 0, unfactor(snowfall))))
MyData_weather<-MyData_weather %>% mutate(preciptotal_new= ifelse(preciptotal == "M" , 0,  ifelse(trimws(preciptotal) == "T" , 0, unfactor(preciptotal))))
MyData_weather$station_nbr =as.numeric(MyData_weather$station_nbr  )
MyData_weather$tmax =as.numeric(MyData_weather$tmax  )
MyData_weather$tmin =as.numeric(MyData_weather$tmin  )
MyData_weather$snowfall_new =as.numeric(MyData_weather$snowfall_new  )
MyData_weather$preciptotal_new =as.numeric(MyData_weather$preciptotal_new )
MyData_weather$month =" "
#MyData_weather <-   filter(MyData_weather, station_nbr <= 9  )
MyData_weather$year <-   substr(MyData_weather$date, 1, 4)
MyData_weather$month <- substr(MyData_weather$date, 6, 7)
MyData_weather<-MyData_weather %>% mutate(month= ifelse(month == "01" ,"Jan",  ifelse(trimws(month) == "02" , "Feb",
ifelse(trimws(month) == "03" , "Mar",
ifelse(trimws(month) == "04" , "Apr",
ifelse(trimws(month) == "05" , "May",
ifelse(trimws(month) == "06" , "Jun",
ifelse(trimws(month) == "07" , "Jul",
ifelse(trimws(month) == "08" , "Aug",
ifelse(trimws(month) == "09" , "Sep",
ifelse(trimws(month) == "10" , "Oct",
ifelse(trimws(month) == "11" , "Nov",
ifelse(trimws(month) == "12" , "Dec",
" ??")))))))))))))
keeps <- c("station_nbr", "date","tmax","tmin","sunrise","sunset","codesum","month","year","preciptotal_new","snowfall_new")
MyData_weather <-  MyData_weather[keeps]
View (MyData_weather)
MyData_weather[is.na(MyData_weather)] <- 0
MyData_feature_train$day_of_week =""
MyData_feature_train$day_of_week = weekdays( as.Date(MyData_feature_train$date))
MyData_feature_train$day_of_week =""
MyData_feature_train$day_of_week = weekdays( as.Date(MyData_feature_train$date))
